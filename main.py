# pip install python-telegram-bot --upgrade

import json
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters, ConversationHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

ADMIN_PASSWORD = "ADMIN_PASSWORD"
ADMIN_WAIT = range(1)


def load_users():
    try:
        with open('users.json', encoding="utf8") as file:
            return json.load(file)
    except:
        return []

def save_users(users):
    with open('users.json', 'w', encoding="utf8") as file:
        json.dump(users, file)


def load_admins():
    try:
        with open('admins.json', encoding="utf8") as file:
            return json.load(file)
    except:
        return []

def save_admins(admins):
    with open('admins.json', 'w', encoding="utf8") as file:
        json.dump(admins, file)


def get_keyboard(user_id):
    users = load_users()
    admins = load_admins()

    inline = [
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
    ]

    if str(user_id) in admins:
        inline.insert(0, [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data='start_timer')])
    else:
        if str(user_id) in users:
            inline.insert(0, [InlineKeyboardButton("üõ° –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data='become_admin')])
            inline.insert(1, [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data='leave')])
        else:
            inline.insert(0, [InlineKeyboardButton("üõ° –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data='become_admin')])
            inline.insert(1, [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫", callback_data='return')])

    return InlineKeyboardMarkup(inline)

def get_reply_keyboard(user_id):
    users = load_users()
    admins = load_admins()

    if str(user_id) in admins:
        return ReplyKeyboardMarkup([
            [KeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ], resize_keyboard=True)
    elif str(user_id) in users:
        return ReplyKeyboardMarkup([
            [KeyboardButton("üõ° –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º"), KeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            [KeyboardButton("üõ° –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º"), KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ], resize_keyboard=True)


def start(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    users = load_users()
    if str(user_id) not in users:
        users.append(str(user_id))
        save_users(users)

    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=get_reply_keyboard(user_id)
    )
    # context.bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keyboard(user_id))

def become_admin(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    admins = load_admins()
    if str(user_id) not in admins:
        if update.callback_query:
            update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        else:
            update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        return ADMIN_WAIT
    update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

def confirm_password(update: Update, context: CallbackContext):
    if update.message.text == ADMIN_PASSWORD:
        admins = load_admins()
        user_id = str(update.effective_chat.id)
        if user_id not in admins:
            admins.append(user_id)
            save_admins(admins)
        update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=get_reply_keyboard(user_id))
        # context.bot.send_message(chat_id=user_id, text="–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=get_keyboard(user_id))
    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    return ConversationHandler.END

def cancel_password(update: Update, context: CallbackContext):
    update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def start_timer_callback(update: Update, context: CallbackContext):
    admins = load_admins()
    user_id = str(update.effective_chat.id)
    if user_id in admins:
        context.job_queue.run_once(warning_timer, 480, context=user_id)
        context.job_queue.run_once(end_timer, 600, context=user_id)
        if update.callback_query:
            update.callback_query.message.reply_text("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        else:
            update.message.reply_text("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    else:
        update.message.reply_text("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

def warning_timer(context: CallbackContext):
    users = load_users()
    for user in users:
        context.bot.send_message(chat_id=user, text="–û—Å—Ç–∞–ª–æ—Å—å –¥–≤–µ –º–∏–Ω—É—Ç—ã.")

def end_timer(context: CallbackContext):
    users = load_users()
    for user in users:
        context.bot.send_message(chat_id=user, text="–í–∞—à–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!")

def help_command(update: Update, context: CallbackContext):
    message = "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/start ‚Äî –Ω–∞—á–∞–ª–æ\n/become_admin ‚Äî —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º\n/leave ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞\n/return ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫\n/help ‚Äî –ø–æ–º–æ—â—å"
    if update.callback_query:
        update.callback_query.message.reply_text(message)
    else:
        update.message.reply_text(message)

def leave(update: Update, context: CallbackContext):
    user_id = str(update.effective_chat.id)
    users = load_users()
    if user_id in users:
        users.remove(user_id)
        save_users(users)
    if update.callback_query:
        update.callback_query.message.reply_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=get_keyboard(user_id))
    else:
        update.message.reply_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=get_reply_keyboard(user_id))

def return_to_list(update: Update, context: CallbackContext):
    user_id = str(update.effective_chat.id)
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        save_users(users)
    if update.callback_query:
        update.callback_query.message.reply_text("–í—ã —Å–Ω–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.") 
    else:
        update.message.reply_text("–í—ã —Å–Ω–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data

    if data == 'start_timer':
        return start_timer_callback(update, context)
    elif data == 'help':
        return help_command(update, context)
    elif data == 'become_admin':
        return become_admin(update, context)
    elif data == 'leave':
        return leave(update, context)
    elif data == 'return':
        return return_to_list(update, context)

def main():
    updater = Updater(":", use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(become_admin, pattern='^become_admin$'), CommandHandler("become_admin", become_admin), MessageHandler(Filters.text("üõ° –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º"), become_admin)],
        states={
            ADMIN_WAIT: [MessageHandler(Filters.text & ~Filters.command, confirm_password)]
        },
        fallbacks=[CommandHandler('cancel', cancel_password)]
    )

    dp.add_handler(conv_handler)

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("leave", leave))
    dp.add_handler(CommandHandler("return", return_to_list))

    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä"), start_timer_callback))
    dp.add_handler(MessageHandler(Filters.text("‚ùì –ü–æ–º–æ—â—å"), help_command))
    dp.add_handler(MessageHandler(Filters.text("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"), leave))
    dp.add_handler(MessageHandler(Filters.text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫"), return_to_list))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
